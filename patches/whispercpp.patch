diff -ruN whisper.cpp-org/cmake/DefaultTargetOptions.cmake whisper.cpp-patched/cmake/DefaultTargetOptions.cmake
--- whisper.cpp-org/cmake/DefaultTargetOptions.cmake	2023-11-07 15:15:48.000000000 +0100
+++ whisper.cpp-patched/cmake/DefaultTargetOptions.cmake	2023-11-08 18:31:59.266704085 +0100
@@ -9,9 +9,13 @@
         cxx_std_11
     )
 
+if (NOT DEFINED CMAKE_INSTALL_RPATH)
+    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+endif()
+
 set_target_properties(${TARGET}
     PROPERTIES
         EXPORT_COMPILE_COMMANDS ON
         RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
-        INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib"
+        INSTALL_RPATH ${CMAKE_INSTALL_RPATH}
 )
diff -ruN whisper.cpp-org/CMakeLists.txt whisper.cpp-patched/CMakeLists.txt
--- whisper.cpp-org/CMakeLists.txt	2023-11-07 15:15:48.000000000 +0100
+++ whisper.cpp-patched/CMakeLists.txt	2023-11-08 20:22:48.473401726 +0100
@@ -170,39 +170,11 @@
 if (WHISPER_OPENBLAS)
     set(WHISPER_BLAS_VENDOR "OpenBLAS")
     set(WHISPER_BLAS ON)
+    set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
+    set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIB_PATH})
+    include_directories(${BLAS_INC_DIR})
 endif()
 
-if (WHISPER_BLAS)
-    if (WIN32)
-        if(DEFINED ENV{OPENBLAS_PATH})
-            set(BLAS_LIBRARIES $ENV{OPENBLAS_PATH}/lib/libopenblas.dll.a)
-            message(STATUS "Libraries ${BLAS_LIBRARIES}")
-            set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
-            include_directories($ENV{OPENBLAS_PATH}/include)
-            set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIBRARIES})
-        else ()
-            message(FATAL_ERROR "BLAS library was not found. Environment variable OPENBLAS_PATH not defined.")
-        endif ()
-    else ()
-        set(BLA_STATIC 1)
-        set(BLA_VENDOR ${WHISPER_BLAS_VENDOR})
-        set(BLA_SIZEOF_INTEGER 8)
-        set(BLA_PREFER_PKGCONFIG 1)
-        find_package(BLAS)
-
-        if(BLAS_FOUND)
-            message(STATUS "BLAS compatible library found")
-            message(STATUS "Libraries ${BLAS_LIBRARIES}")
-            find_path(BLAS_INCLUDE_DIRS cblas.h /usr/include/openblas /usr/local/include/openblas $ENV{BLAS_HOME}/include)
-            set(WHISPER_EXTRA_FLAGS ${WHISPER_EXTRA_FLAGS} -DGGML_USE_OPENBLAS)
-            include_directories(${BLAS_INCLUDE_DIRS})
-            set(WHISPER_EXTRA_LIBS ${WHISPER_EXTRA_LIBS} ${BLAS_LIBRARIES})
-        else()
-            message(FATAL_ERROR "BLAS library was not found")
-        endif()
-    endif ()
-endif ()
-
 if (WHISPER_CUBLAS)
     cmake_minimum_required(VERSION 3.17)
 
@@ -230,13 +202,12 @@
 
 
 if (WHISPER_HIPBLAS)
-    list(APPEND CMAKE_PREFIX_PATH /opt/rocm)
-    if (NOT ${CMAKE_C_COMPILER_ID} MATCHES "Clang")
-        message(WARNING "Only LLVM is supported for HIP, hint: CC=/opt/rocm/llvm/bin/clang")
-    endif()
-    if (NOT ${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
-        message(WARNING "Only LLVM is supported for HIP, hint: CXX=/opt/rocm/llvm/bin/clang++")
-    endif()
+    set(ROCM_PATH /opt/rocm CACHE STRING "ROCm root dir")
+    list(APPEND CMAKE_PREFIX_PATH ${ROCM_PATH})
+    message(STATUS "using ROCm root path ${ROCM_PATH}")
+
+    set(CMAKE_C_COMPILER ${ROCM_PATH}/llvm/bin/clang)
+    set(CMAKE_CXX_COMPILER ${ROCM_PATH}/llvm/bin/clang++)
 
     find_package(hip)
     find_package(hipblas)
@@ -245,9 +216,20 @@
     if (${hipblas_FOUND} AND ${hip_FOUND})
         message(STATUS "HIP and hipBLAS found")
         add_compile_definitions(GGML_USE_HIPBLAS GGML_USE_CUBLAS)
-        add_library(ggml-rocm OBJECT ggml-cuda.cu ggml-cuda.h)
+
+        set(GGML_SOURCES_HIP ggml-cuda.cu ggml-cuda.h)
+
+        add_library(ggml-rocm OBJECT ${GGML_SOURCES_HIP})
         set_property(TARGET ggml-rocm PROPERTY POSITION_INDEPENDENT_CODE ON)
         set_source_files_properties(ggml-cuda.cu PROPERTIES LANGUAGE CXX)
+
+        if (DEFINED CMAKE_HIP_ARCHITECTURES AND NOT CMAKE_HIP_ARCHITECTURES STREQUAL "")
+            message(STATUS "HIP architectures set to ${CMAKE_HIP_ARCHITECTURES}")
+            string(REPLACE " " " --offload-arch=" HIP_OPTS ${CMAKE_HIP_ARCHITECTURES})
+            set(HIP_OPTS "--offload-arch=${HIP_OPTS}")
+            set_target_properties(ggml-rocm PROPERTIES COMPILE_FLAGS ${HIP_OPTS})
+        endif()
+
         target_link_libraries(ggml-rocm PRIVATE hip::device PUBLIC hip::host roc::rocblas roc::hipblas)
 
         if (WHISPER_STATIC)
@@ -521,7 +503,11 @@
 
 if (GGML_SOURCES_CUDA)
     message(STATUS "GGML CUDA sources found, configuring CUDA architecture")
-    set_property(TARGET whisper PROPERTY CUDA_ARCHITECTURES OFF)
+    if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
+        set(CMAKE_CUDA_ARCHITECTURES 75)
+    endif()
+    message(STATUS "CUDA architectures set to ${CMAKE_CUDA_ARCHITECTURES}")
+    set_property(TARGET whisper PROPERTY CUDA_ARCHITECTURES ${CMAKE_CUDA_ARCHITECTURES})
     set_property(TARGET whisper PROPERTY CUDA_SELECT_NVCC_ARCH_FLAGS "Auto")
 endif()
 
@@ -539,7 +525,7 @@
 
 install(TARGETS ${TARGET}
     LIBRARY  DESTINATION lib
-    ARCHIVE  DESTINATION lib/static
+    ARCHIVE  DESTINATION lib
     RUNTIME  DESTINATION bin
     RESOURCE DESTINATION bin
     PUBLIC_HEADER DESTINATION include
