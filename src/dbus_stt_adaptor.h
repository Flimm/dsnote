/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp /home/mkiol/dev/dsnote/src/../dbus/org.mkiol.Stt.xml -a /home/mkiol/dev/dsnote/src/../src/dbus_stt_adaptor
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef DBUS_STT_ADAPTOR_H
#define DBUS_STT_ADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.mkiol.Stt
 */
class SttAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.mkiol.Stt")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.mkiol.Stt\">\n"
"    <property access=\"read\" type=\"i\" name=\"State\"/>\n"
"    <signal name=\"StatePropertyChanged\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"state\"/>\n"
"    </signal>\n"
"    <property access=\"read\" type=\"b\" name=\"Speech\"/>\n"
"    <signal name=\"SpeechPropertyChanged\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"speech\"/>\n"
"    </signal>\n"
"    <property access=\"readwrite\" type=\"s\" name=\"DefaultLang\"/>\n"
"    <signal name=\"DefaultLangPropertyChanged\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"lang\"/>\n"
"    </signal>\n"
"    <property access=\"read\" type=\"a{sv}\" name=\"Langs\">\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <signal name=\"LangsPropertyChanged\">\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"out\" type=\"a{sv}\" name=\"langs\"/>\n"
"    </signal>\n"
"    <property access=\"read\" type=\"i\" name=\"CurrentTask\"/>\n"
"    <signal name=\"CurrentTaskPropertyChanged\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"task\"/>\n"
"    </signal>\n"
"    <signal name=\"IntermediateTextDecoded\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"text\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"lang\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"task\"/>\n"
"    </signal>\n"
"    <signal name=\"TextDecoded\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"text\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"lang\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"task\"/>\n"
"    </signal>\n"
"    <signal name=\"FileTranscribeFinished\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"task\"/>\n"
"    </signal>\n"
"    <signal name=\"FileTranscribeProgress\">\n"
"      <arg direction=\"out\" type=\"d\" name=\"progress\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"task\"/>\n"
"    </signal>\n"
"    <method name=\"GetFileTranscribeProgress\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"task\"/>\n"
"      <arg direction=\"out\" type=\"d\" name=\"progress\"/>\n"
"    </method>\n"
"    <signal name=\"ErrorOccured\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"code\"/>\n"
"    </signal>\n"
"    <method name=\"StartListen\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"mode\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"lang\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"task\"/>\n"
"    </method>\n"
"    <method name=\"StopListen\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"task\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"result\"/>\n"
"    </method>\n"
"    <method name=\"TranscribeFile\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"file\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"lang\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"task\"/>\n"
"    </method>\n"
"    <method name=\"CancelTranscribeFile\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"task\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"result\"/>\n"
"    </method>\n"
"    <method name=\"Reload\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"result\"/>\n"
"    </method>\n"
"    <method name=\"KeepAliveTask\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"task\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"timer\"/>\n"
"    </method>\n"
"    <method name=\"KeepAliveService\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"timer\"/>\n"
"    </method>\n"
"    <property access=\"read\" type=\"a{sv}\" name=\"Translations\">\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"  </interface>\n"
        "")
public:
    SttAdaptor(QObject *parent);
    virtual ~SttAdaptor();

public: // PROPERTIES
    Q_PROPERTY(int CurrentTask READ currentTask)
    int currentTask() const;

    Q_PROPERTY(QString DefaultLang READ defaultLang WRITE setDefaultLang)
    QString defaultLang() const;
    void setDefaultLang(const QString &value);

    Q_PROPERTY(QVariantMap Langs READ langs)
    QVariantMap langs() const;

    Q_PROPERTY(bool Speech READ speech)
    bool speech() const;

    Q_PROPERTY(int State READ state)
    int state() const;

    Q_PROPERTY(QVariantMap Translations READ translations)
    QVariantMap translations() const;

public Q_SLOTS: // METHODS
    int CancelTranscribeFile(int task);
    double GetFileTranscribeProgress(int task);
    int KeepAliveService();
    int KeepAliveTask(int task);
    int Reload();
    int StartListen(int mode, const QString &lang);
    int StopListen(int task);
    int TranscribeFile(const QString &file, const QString &lang);
Q_SIGNALS: // SIGNALS
    void CurrentTaskPropertyChanged(int task);
    void DefaultLangPropertyChanged(const QString &lang);
    void ErrorOccured(int code);
    void FileTranscribeFinished(int task);
    void FileTranscribeProgress(double progress, int task);
    void IntermediateTextDecoded(const QString &text, const QString &lang, int task);
    void LangsPropertyChanged(const QVariantMap &langs);
    void SpeechPropertyChanged(bool speech);
    void StatePropertyChanged(int state);
    void TextDecoded(const QString &text, const QString &lang, int task);
};

#endif
