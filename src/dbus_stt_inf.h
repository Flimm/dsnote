/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp dbus/org.mkiol.Stt.xml -p src/dbus_stt_inf
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUS_STT_INF_H
#define DBUS_STT_INF_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.mkiol.Stt
 */
class OrgMkiolSttInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.mkiol.Stt"; }

public:
    OrgMkiolSttInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgMkiolSttInterface();

    Q_PROPERTY(int CurrentTask READ currentTask)
    inline int currentTask() const
    { return qvariant_cast< int >(property("CurrentTask")); }

    Q_PROPERTY(QString DefaultLang READ defaultLang WRITE setDefaultLang)
    inline QString defaultLang() const
    { return qvariant_cast< QString >(property("DefaultLang")); }
    inline void setDefaultLang(const QString &value)
    { setProperty("DefaultLang", QVariant::fromValue(value)); }

    Q_PROPERTY(QString DefaultModel READ defaultModel WRITE setDefaultModel)
    inline QString defaultModel() const
    { return qvariant_cast< QString >(property("DefaultModel")); }
    inline void setDefaultModel(const QString &value)
    { setProperty("DefaultModel", QVariant::fromValue(value)); }

    Q_PROPERTY(QVariantMap Langs READ langs)
    inline QVariantMap langs() const
    { return qvariant_cast< QVariantMap >(property("Langs")); }

    Q_PROPERTY(QVariantMap Models READ models)
    inline QVariantMap models() const
    { return qvariant_cast< QVariantMap >(property("Models")); }

    Q_PROPERTY(bool Speech READ speech)
    inline bool speech() const
    { return qvariant_cast< bool >(property("Speech")); }

    Q_PROPERTY(int State READ state)
    inline int state() const
    { return qvariant_cast< int >(property("State")); }

    Q_PROPERTY(QVariantMap Translations READ translations)
    inline QVariantMap translations() const
    { return qvariant_cast< QVariantMap >(property("Translations")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> CancelTranscribeFile(int task)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(task);
        return asyncCallWithArgumentList(QStringLiteral("CancelTranscribeFile"), argumentList);
    }

    inline QDBusPendingReply<double> GetFileTranscribeProgress(int task)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(task);
        return asyncCallWithArgumentList(QStringLiteral("GetFileTranscribeProgress"), argumentList);
    }

    inline QDBusPendingReply<int> KeepAliveService()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("KeepAliveService"), argumentList);
    }

    inline QDBusPendingReply<int> KeepAliveTask(int task)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(task);
        return asyncCallWithArgumentList(QStringLiteral("KeepAliveTask"), argumentList);
    }

    inline QDBusPendingReply<int> Reload()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reload"), argumentList);
    }

    inline QDBusPendingReply<int> StartListen(int mode, const QString &lang)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode) << QVariant::fromValue(lang);
        return asyncCallWithArgumentList(QStringLiteral("StartListen"), argumentList);
    }

    inline QDBusPendingReply<int> StopListen(int task)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(task);
        return asyncCallWithArgumentList(QStringLiteral("StopListen"), argumentList);
    }

    inline QDBusPendingReply<int> TranscribeFile(const QString &file, const QString &lang)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(file) << QVariant::fromValue(lang);
        return asyncCallWithArgumentList(QStringLiteral("TranscribeFile"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void CurrentTaskPropertyChanged(int task);
    void DefaultLangPropertyChanged(const QString &lang);
    void DefaultModelPropertyChanged(const QString &model);
    void ErrorOccured(int code);
    void FileTranscribeFinished(int task);
    void FileTranscribeProgress(double progress, int task);
    void IntermediateTextDecoded(const QString &text, const QString &lang, int task);
    void LangsPropertyChanged(const QVariantMap &langs);
    void ModelsPropertyChanged(const QVariantMap &models);
    void SpeechPropertyChanged(bool speech);
    void StatePropertyChanged(int state);
    void TextDecoded(const QString &text, const QString &lang, int task);
};

namespace org {
  namespace mkiol {
    typedef ::OrgMkiolSttInterface Stt;
  }
}
#endif
